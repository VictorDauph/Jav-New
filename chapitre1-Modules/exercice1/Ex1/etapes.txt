Structure du projet

Le projet Maven est organisé en sous-projets (ou modules) :

    com.bigcorp.project.graphics : contient la classe StartWindow.
    com.bigcorp.project.data-repository : contient la classe UserRepository.

La classe StartWindow de graphics utilise la classe UserRepository de data-repository, et nous allons gérer cela avec des fichiers module-info.java.



Étape 1 : Lancer StartWindow sans fichiers module-info.java
Hypothèse de départ

    Aucun des projets n'a de fichier module-info.java.
    Il est possible de lancer le main() de la classe StartWindow sans problème en utilisant la méthode classique du classpath (non-modulaire).

Dans cette situation, l'application devrait fonctionner correctement car nous utilisons l'ancien modèle de classpath où les dépendances sont découvertes de manière implicite.



Étape 2 : Ajouter module-info.java dans data-repository

    Création du fichier module-info.java dans le projet data-repository.

java

module com.bigcorp.project.data.repository {
    // Ne contient rien d'autre que la directive module.
}

Résultat

L'application ne fonctionne pas. Voici pourquoi :

    La classe UserRepository n'est pas exportée par le module data-repository. Par défaut, les classes d'un module ne sont accessibles qu'à l'intérieur de ce module, sauf si elles sont explicitement exportées.
    Par conséquent, StartWindow ne peut pas accéder à UserRepository, ce qui génère une erreur de compilation.




Étape 3 : Supprimer module-info.java de data-repository et ajouter dans graphics

    Créer le fichier module-info.java dans le projet graphics :

java

module com.bigcorp.project.graphics {
    // Ne contient que la directive module.
}

Résultat

L'application ne fonctionne pas. Voici pourquoi :

    graphics n'a pas accès à data-repository, car il n'y a aucune dépendance explicite déclarée entre les deux modules. Étant donné que nous utilisons maintenant le système de modules, graphics doit connaître et déclarer les modules dont il dépend.




Étape 4 : Créer des module-info.java pour les deux projets

Maintenant, nous allons configurer correctement les deux modules pour que l'application fonctionne :

    Fichier module-info.java dans data-repository :

java

module com.bigcorp.project.data.repository {
    exports com.bigcorp.project.data.repository;  // Exporte le package contenant UserRepository
}

    Ce fichier module-info.java exporte explicitement le package com.bigcorp.project.data.repository, rendant la classe UserRepository accessible à d'autres modules.

    Fichier module-info.java dans graphics :

java

module com.bigcorp.project.graphics {
    requires com.bigcorp.project.data.repository;  // Déclare la dépendance à data-repository
}

    Ici, nous indiquons que graphics dépend du module data-repository en utilisant requires.

Résultat

L'application fonctionne correctement maintenant. Les deux modules sont configurés de manière à ce que graphics puisse accéder à UserRepository via le fichier module-info.java.



Étape 5 : Bonus - Utiliser uniquement un fichier module-info.java dans graphics

    Fichier module-info.java dans graphics :

java

module com.bigcorp.project.graphics {
    requires com.bigcorp.project.data.repository;
}

    Pas de fichier module-info.java dans data-repository.

Résultat

L'application fonctionne, mais sous certaines conditions.

    Si le module data-repository n'a pas de fichier module-info.java, il est traité comme un module "automatique". Cela signifie que tous les packages de data-repository sont automatiquement exportés, sans qu'il soit nécessaire de les déclarer dans module-info.java.
    Cependant, cette approche est moins recommandée pour des raisons de maintenabilité et de clarté du code.

Conclusion

    Fichier module-info.java dans data-repository : Exporte les packages nécessaires pour qu'ils soient accessibles par d'autres modules.
    Fichier module-info.java dans graphics : Déclare explicitement les dépendances avec requires pour utiliser d'autres modules.

Utiliser le système de modules avec Maven permet une meilleure gestion des dépendances et une encapsulation stricte, mais nécessite de bien configurer les fichiers module-info.java.